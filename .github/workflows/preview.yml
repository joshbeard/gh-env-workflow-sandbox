name: "GitHub Actions Workflow Test"

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request_target:
    types: [opened, synchronize]  # For native PR integration
  issue_comment:
    types: [created]  # For /demo commands
  workflow_dispatch:  # For triggered deployments
    inputs:
      pr_number:
        description: 'PR number for deployment'
        required: true
        type: string
      custom_args:
        description: 'Custom arguments to deploy'
        required: false
        type: string
      comment_user:
        description: 'User who requested deployment'
        required: true
        type: string
      is_cleanup:
        description: 'Whether this is a cleanup operation'
        required: false
        type: boolean
        default: false

jobs:
  comment-parser:
    name: "Parse Comment & Trigger PR Workflow"
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        startsWith(github.event.comment.body, '/demo')

    steps:
      - name: Parse comment and trigger PR workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment.body;
            const commentUser = context.payload.comment.user.login;
            const prNumber = context.payload.issue.number;

            console.log(`🔍 Parsing comment: ${comment}`);
            console.log(`👤 User: ${commentUser}`);
            console.log(`📋 PR: ${prNumber}`);

            let shouldTrigger = false;
            let customArgs = '';
            let isCleanup = false;

            if (comment === '/demo') {
              console.log('✅ Basic deployment command');
              shouldTrigger = true;
            } else if (comment === '/demo cleanup') {
              console.log('🧹 Cleanup command');
              shouldTrigger = true;
              isCleanup = true;
            } else if (comment.match(/^\/demo\s+.+/)) {
              console.log('⚙️ Custom deployment command');
              shouldTrigger = true;
              customArgs = comment.replace(/^\/demo\s+/, '');
              console.log(`📝 Args: ${customArgs}`);
            } else {
              console.log('❌ Unrecognized command');
            }

            if (shouldTrigger) {
              console.log('🚀 Triggering PR deployment workflow...');

              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'preview.yml',
                ref: context.repo.default_branch,
                inputs: {
                  pr_number: prNumber.toString(),
                  custom_args: customArgs,
                  comment_user: commentUser,
                  is_cleanup: isCleanup.toString()
                }
              });

              // Post acknowledgment comment
              await github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `🔄 **Deployment Request Queued**\n\n` +
                     `**Requested by:** @${commentUser}\n` +
                     `**Command:** \`${comment}\`\n` +
                     `**Status:** Awaiting approval in [preview-pr environment](https://github.com/${context.repo.owner}/${context.repo.repo}/actions)\n\n` +
                     `The deployment will appear as a PR check once approved.`
              });
            }

  pr-deployment:
    name: "PR Preview Deployment"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment:
      name: preview-pr
      url: https://github.com/${{ github.repository }}/pull/${{ github.event.inputs.pr_number }}

    steps:
      - name: Get PR details
        id: pr-info
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pr_number }}
            });

            console.log(`📋 PR #${pr.number}: ${pr.title}`);
            console.log(`🔗 Head SHA: ${pr.head.sha}`);
            console.log(`🌿 Head Ref: ${pr.head.ref}`);

            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('pr_title', pr.title);
            return pr;

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-info.outputs.head_sha }}

      - name: Create pending status check
        uses: actions/github-script@v6
        with:
          script: |
            const isCleanup = '${{ github.event.inputs.is_cleanup }}' === 'true';
            const context_name = isCleanup ? 'Preview Cleanup' : 'Preview Deployment';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.pr-info.outputs.head_sha }}',
              state: 'pending',
              context: context_name,
              description: 'Deployment approved, running...',
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Show deployment details
        run: |
          echo "🚀 PREVIEW DEPLOYMENT APPROVED"
          echo "==============================="
          echo "👤 Requested by: ${{ github.event.inputs.comment_user }}"
          echo "🔒 Approved by: ${{ github.actor }}"
          echo "📋 PR: #${{ github.event.inputs.pr_number }}"
          echo "📝 Title: ${{ steps.pr-info.outputs.pr_title }}"
          echo "🔗 Head SHA: ${{ steps.pr-info.outputs.head_sha }}"
          echo "⚙️ Arguments: ${{ github.event.inputs.custom_args }}"
          echo "🧹 Cleanup: ${{ github.event.inputs.is_cleanup }}"
          echo ""

      - name: Run deployment script
        if: github.event.inputs.is_cleanup != 'true'
        working-directory: ./demo
        env:
          ENVIRONMENT_SECRET: ${{ secrets.ENVIRONMENT_SECRET }}
        run: |
          echo "🚀 Running deployment script..."
          echo ""

          # Run script with parsed arguments
          if [[ -n "${{ github.event.inputs.custom_args }}" ]]; then
            ./generate-demo.sh --output output ${{ github.event.inputs.custom_args }}
          else
            ./generate-demo.sh --output output
          fi

      - name: Run cleanup script
        if: github.event.inputs.is_cleanup == 'true'
        run: |
          echo "🧹 Running cleanup for PR #${{ github.event.inputs.pr_number }}"
          echo "   Would clean up preview environment resources here"
          echo "✅ Cleanup completed"

      - name: Upload artifacts
        if: github.event.inputs.is_cleanup != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: preview-pr-${{ github.event.inputs.pr_number }}
          path: demo/output/
          retention-days: 7

      - name: Create success status check
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const isCleanup = '${{ github.event.inputs.is_cleanup }}' === 'true';
            const context_name = isCleanup ? 'Preview Cleanup' : 'Preview Deployment';
            const customArgs = '${{ github.event.inputs.custom_args }}' || '(default)';
            const description = isCleanup ?
              '✅ Cleanup completed' :
              `✅ Deployed with args: ${customArgs}`;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.pr-info.outputs.head_sha }}',
              state: 'success',
              context: context_name,
              description: description,
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Create failure status check
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const isCleanup = '${{ github.event.inputs.is_cleanup }}' === 'true';
            const context_name = isCleanup ? 'Preview Cleanup' : 'Preview Deployment';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: '${{ steps.pr-info.outputs.head_sha }}',
              state: 'failure',
              context: context_name,
              description: '❌ Deployment failed - check logs',
              target_url: `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`
            });

      - name: Post results comment
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ github.event.inputs.pr_number }};
            const customArgs = '${{ github.event.inputs.custom_args }}' || '(default)';
            const commentUser = '${{ github.event.inputs.comment_user }}';
            const approver = '${{ github.actor }}';
            const isCleanup = '${{ github.event.inputs.is_cleanup }}' === 'true';
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const success = '${{ job.status }}' === 'success';

            let body = isCleanup ?
              `## 🧹 Preview Environment Cleanup\n\n` :
              `## 🚀 Preview Deployment ${success ? 'Completed' : 'Failed'}\n\n`;

            body += `**Status:** ${success ? '✅' : '❌'} ${isCleanup ? 'Cleanup' : 'Deployment'} ${success ? 'completed' : 'failed'}\n`;
            body += `**PR:** #${prNumber}\n`;
            body += `**Requested by:** @${commentUser}\n`;
            body += `**Approved by:** @${approver}\n`;
            if (!isCleanup) {
              body += `**Arguments:** \`${customArgs}\`\n`;
            }
            body += `**Logs:** [View details](${runUrl})\n`;
            if (!isCleanup && success) {
              body += `**Artifacts:** [Download results](${runUrl})\n`;
            }
            body += `\n📊 This deployment shows up as a native PR check above.`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });