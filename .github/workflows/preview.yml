name: "GitHub Actions Workflow Test"

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [closed]  # Only for cleanup
  issue_comment:
    types: [created]  # For /demo commands
  workflow_dispatch:  # Manual triggers
    inputs:
      pr_number:
        description: 'PR number for manual test'
        required: false
        type: string
      custom_args:
        description: 'Custom arguments to test'
        required: false
        type: string

jobs:
  security-check:
    name: "Parse Comment & Queue for Approval"
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' &&
        github.event.issue.pull_request != null &&
        startsWith(github.event.comment.body, '/demo')
    outputs:
      should_run: ${{ steps.parse.outputs.should_run }}
      custom_args: ${{ steps.parse.outputs.custom_args }}
      pr_number: ${{ steps.parse.outputs.pr_number }}
      cleanup_only: ${{ steps.parse.outputs.cleanup_only }}
      comment_user: ${{ steps.parse.outputs.comment_user }}

    steps:
      - name: Parse comment (no permission check)
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
          COMMENT_AUTH: ${{ github.event.comment.author_association }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "üîç Comment: $COMMENT_BODY"
          echo "üë§ User: $COMMENT_USER"
          echo "üè∑Ô∏è  Permission: $COMMENT_AUTH"
          echo "üìã PR: $PR_NUMBER"
          echo ""
          echo "‚ÑπÔ∏è  Security: Relying on environment protection for approval"
          echo ""

          # Parse command safely using environment variable
          should_run="false"
          cleanup_only="false"
          custom_args=""

          if [[ "$COMMENT_BODY" == "/demo" ]]; then
            echo "‚úÖ Basic test command requested"
            should_run="true"
          elif [[ "$COMMENT_BODY" == "/demo cleanup" ]]; then
            echo "üßπ Cleanup command requested"
            cleanup_only="true"
          elif [[ "$COMMENT_BODY" =~ ^/demo[[:space:]].+ ]]; then
            echo "‚öôÔ∏è  Custom command with args requested"
            should_run="true"
            # Safely extract args using parameter expansion
            custom_args="${COMMENT_BODY#/demo }"
            # Remove leading whitespace
            custom_args="${custom_args#"${custom_args%%[![:space:]]*}"}"
            echo "üìù Args: $custom_args"
          else
            echo "‚ùå Unrecognized command"
          fi

          echo ""
          echo "üîí Command parsed - awaiting environment approval..."

          # Set outputs
          echo "should_run=$should_run" >> $GITHUB_OUTPUT
          echo "custom_args=$custom_args" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "cleanup_only=$cleanup_only" >> $GITHUB_OUTPUT
          echo "comment_user=$COMMENT_USER" >> $GITHUB_OUTPUT

  test-workflow:
    name: "Deploy to Preview Environment"
    runs-on: ubuntu-latest
    needs: security-check
    if: needs.security-check.outputs.should_run == 'true'
    environment:
      name: preview-pr
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}

    env:
      CUSTOM_ARGS: ${{ needs.security-check.outputs.custom_args }}
      PR_NUMBER: ${{ needs.security-check.outputs.pr_number }}
      COMMENT_USER: ${{ needs.security-check.outputs.comment_user }}

    steps:
      - name: Show deployment request details
        run: |
          echo "üöÄ DEPLOYMENT REQUEST APPROVED"
          echo "=================================="
          echo "üë§ Requested by: $COMMENT_USER"
          echo "üìã PR Number: $PR_NUMBER"
          echo "‚öôÔ∏è  Arguments: $CUSTOM_ARGS"
          echo "üîí Approved by: ${{ github.actor }}"
          echo ""
          echo "üåç Workflow Context:"
          echo "  Event: ${{ github.event_name }}"
          echo "  Repository: ${{ github.repository }}"
          echo "  SHA: ${{ github.sha }}"
          echo ""

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run test script
        working-directory: ./demo
        env:
          ENVIRONMENT_SECRET: ${{ secrets.ENVIRONMENT_SECRET }}
        run: |
          echo "üöÄ Running workflow test script..."
          echo ""

          # Run script with parsed arguments
          if [[ -n "$CUSTOM_ARGS" ]]; then
            ./generate-demo.sh --output output $CUSTOM_ARGS
          else
            ./generate-demo.sh --output output
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: workflow-test-pr-${{ env.PR_NUMBER }}
          path: demo/output/
          retention-days: 7

      - name: Comment results
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const customArgs = process.env.CUSTOM_ARGS || '(none)';
            const commentUser = process.env.COMMENT_USER;
            const approver = '${{ github.actor }}';
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;

            let body = `## üöÄ Preview Deployment Completed\n\n`;
            body += `**Status:** ‚úÖ Successfully deployed to preview environment\n`;
            body += `**PR:** #${prNumber}\n`;
            body += `**Requested by:** @${commentUser}\n`;
            body += `**Approved by:** @${approver}\n`;
            body += `**Arguments:** \`${customArgs}\`\n`;
            body += `**Logs:** [View details](${runUrl})\n`;
            body += `**Artifacts:** [Download test results](${runUrl})\n\n`;
            body += `This deployment verified:\n`;
            body += `- ‚úÖ Comment parsing and argument extraction\n`;
            body += `- ‚úÖ Environment protection and approval workflow\n`;
            body += `- ‚úÖ Secret access and job execution\n`;
            body += `- ‚úÖ Artifact generation and upload`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  cleanup:
    name: "Cleanup Preview Environment"
    runs-on: ubuntu-latest
    if: needs.security-check.outputs.cleanup_only == 'true'
    needs: [security-check]
    environment: preview-pr

    env:
      PR_NUMBER: ${{ needs.security-check.outputs.pr_number }}
      COMMENT_USER: ${{ needs.security-check.outputs.comment_user }}

    steps:
      - name: Show cleanup request details
        run: |
          echo "üßπ CLEANUP REQUEST APPROVED"
          echo "============================"
          echo "üë§ Requested by: $COMMENT_USER"
          echo "üìã PR Number: $PR_NUMBER"
          echo "üîí Approved by: ${{ github.actor }}"
          echo ""

      - name: Simulate cleanup
        run: |
          echo "üßπ Testing cleanup for PR #$PR_NUMBER"
          echo "   Would clean up preview environment resources here"
          echo "‚úÖ Cleanup test completed"

      - name: Comment cleanup results
        uses: actions/github-script@v6
        with:
          script: |
            const prNumber = ${{ env.PR_NUMBER }};
            const commentUser = process.env.COMMENT_USER;
            const approver = '${{ github.actor }}';

            let body = `## üßπ Preview Environment Cleanup\n\n`;
            body += `**Status:** ‚úÖ Cleanup completed\n`;
            body += `**PR:** #${prNumber}\n`;
            body += `**Requested by:** @${commentUser}\n`;
            body += `**Approved by:** @${approver}`;

            await github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

  manual-test:
    name: "Manual Test"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: preview-pr

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run manual test
        working-directory: ./demo
        run: |
          echo "üéÆ Manual workflow test"
          echo "PR: ${{ github.event.inputs.pr_number || 'manual' }}"
          echo "Args: ${{ github.event.inputs.custom_args || 'none' }}"
          echo ""

          args="${{ github.event.inputs.custom_args }}"
          if [[ -n "$args" ]]; then
            ./generate-demo.sh --output output $args
          else
            ./generate-demo.sh --output output --test
          fi

      - name: Upload manual test results
        uses: actions/upload-artifact@v4
        with:
          name: manual-test-${{ github.event.inputs.pr_number || 'manual' }}
          path: demo/output/
          retention-days: 7